<controls:PageBase 
    xmlns:Primitives="using:Telerik.UI.Xaml.Controls.Primitives"      
    x:Class="WellDone.Views.ListPage"
    xmlns:prism="using:Microsoft.Practices.Prism.Mvvm"
    xmlns:controls="using:WellDone.Controls"    
    xmlns:local="using:WellDone"
    prism:ViewModelLocator.AutoWireViewModel="True"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"    
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    xmlns:designTime="using:WellDone.DesignTime"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core">

    <d:Page.DataContext>
        <designTime:LoginPageViewModel/>
    </d:Page.DataContext>

    <Grid x:Name="LayoutRoot">

        <Grid.ChildrenTransitions>
            <TransitionCollection>
                <EntranceThemeTransition/>
            </TransitionCollection>
        </Grid.ChildrenTransitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Title Panel -->
        <StackPanel Grid.Row="0" Margin="19,20,0,0">
            <TextBlock Text="WellDone" Style="{ThemeResource TitleTextBlockStyle}" Margin="0,12,0,0"/>
            <TextBlock Text="{Binding MainViewModel.SelectedList}" Margin="0,-6.5,0,26.5" Style="{ThemeResource HeaderTextBlockStyle}" CharacterSpacing="{ThemeResource PivotHeaderItemCharacterSpacing}"/>            
        </StackPanel>

        <!--Telerik busy indicator-->
        <Primitives:RadBusyIndicator Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" IsActive="{Binding MainViewModel.IsListLoading,UpdateSourceTrigger=PropertyChanged}" AnimationStyle="AnimationStyle1" Visibility="{Binding MainViewModel.IsListLoading, Converter = {StaticResource BooleanToVisibilityConverter}}"/>
        
        <Grid  x:Name="ContentRoot" Grid.Row="1" Margin="19,9.5,19,0" Visibility="{Binding MainViewModel.IsListLoading, Converter = {StaticResource InverseBooleanToVisibilityConverter}}">
            <ListView x:Name="taskListView" Visibility="{Binding MainViewModel.IsTaskListVisibile, Converter = {StaticResource BooleanToVisibilityConverter}}"            
                IsItemClickEnabled="True"
                ItemsSource="{Binding MainViewModel.Tasks}"
                SelectionMode="Single"
                SelectedItem="{Binding MainViewModel.SelectedTask,UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <Border Background="Gray" Margin="2,2,2,2">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="35"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <CheckBox Name="CheckboxComplete" IsChecked="{Binding IsComplete, Mode=TwoWay}" Grid.Column="0" Margin="2,2,2,2">
                                    <interactivity:Interaction.Behaviors>
                                        <core:EventTriggerBehavior EventName="Checked">
                                            <core:InvokeCommandAction 
                                                Command="{Binding Path=DataContext.CheckTaskCommand,ElementName=taskListView}" />
                                        </core:EventTriggerBehavior>
                                    </interactivity:Interaction.Behaviors>
                                </CheckBox>
                                <StackPanel Orientation="Vertical" Margin="10" Grid.Column="1">
                                    <TextBlock Text="{Binding Topic, Mode=TwoWay}" Style="{StaticResource TitleTextBlockStyle}" />
                                    <TextBlock Text="{Binding DueDate, Mode=TwoWay,Converter={StaticResource StringFormatConverter}, ConverterParameter='{}{0:dd MMM yyyy}'}" Style="{StaticResource BaseTextBlockStyle}" />
                                </StackPanel>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </ListView.ItemTemplate>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="ItemClick">
                        <core:InvokeCommandAction Command="{Binding Path=ShowProjectTasksCommand}"
                      />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
            </ListView>
            <ListView x:Name="contextListView" Margin="0,0,30,90" Visibility="{Binding MainViewModel.IsTaskListVisibile, Converter = {StaticResource InverseBooleanToVisibilityConverter}}"            
                IsItemClickEnabled="True"
                ItemsSource="{Binding MainViewModel.ContextsCollection}"
                SelectedItem="{Binding SelectedContext,UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                SelectionMode="Single" >
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <Border Background="Gray" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <StackPanel Orientation="Vertical" Margin="10" Grid.Column="0">
                                    <TextBlock Text="{Binding Name, Mode=TwoWay}" Style="{StaticResource TitleTextBlockStyle}"/>
                                </StackPanel>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </ListView.ItemTemplate>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="ItemClick">
                        <core:InvokeCommandAction Command="{Binding Path=ShowContextTasksCommand}"
                      />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
            </ListView>
        </Grid>

    </Grid>
    <Page.BottomAppBar>
        <!--IsOpen="{Binding MainViewModel.IsAppBarVisibile, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"-->
        <CommandBar >
            <CommandBar.SecondaryCommands>
                <AppBarButton x:Uid="AboutAppBarButton" Command="{Binding MainViewModel.NavigateCommand}" CommandParameter="about" Label="About" Icon="Admin"/>
            </CommandBar.SecondaryCommands>
            <AppBarButton x:Uid="HomeAppBarButton" Command="{Binding MainViewModel.NavigateCommand}" CommandParameter="main" Icon="Home" Label="Home"/>
            <AppBarButton x:Uid="EditProjectAppBarButton" Command="{Binding EditProjectCommand}" Label="Edit Project" Icon="CalendarWeek" Visibility="{Binding IsInsideProjectList, Converter = {StaticResource BooleanToVisibilityConverter}}"/>
            <AppBarButton x:Uid="DeleteContextAppBarButton" Command="{Binding MainViewModel.DeleteContextCommand}" Label="Delete Context" Icon="Remove" Visibility="{Binding MainViewModel.IsInsideContextList, Converter = {StaticResource BooleanToVisibilityConverter}}"/>
            <AppBarButton x:Uid="AddNewContextAppBarButton" Command="{Binding MainViewModel.AddNewContextCommand}" Label="Add Context" Icon="Pin" Visibility="{Binding MainViewModel.IsInsideContextList, Converter = {StaticResource BooleanToVisibilityConverter}}"/>
            <AppBarButton x:Uid="AddNewAppBarButton" Command="{Binding MainViewModel.AddNewTaskCommand}" Label="New task" Icon="Add" Visibility="{Binding MainViewModel.IsInsideContextList, Converter = {StaticResource InverseBooleanToVisibilityConverter}}"/>            
            
        </CommandBar>
    </Page.BottomAppBar>
</controls:PageBase>
